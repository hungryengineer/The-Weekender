name: 'Terraform decommission'

on:
  push:
    branches: [ "pre-master" ]
  pull_request:

permissions:
  contents: read

jobs:

  #########################k8s decommission#############################
  
    terraform-k8s-decommission:
      name: 'Terraform-k8s'
      runs-on: ubuntu-latest
      environment: playground
      
      env:       
        working-directory-k8s: devsecops_x_arcade_game/Terraform_configuration/env/k8s
        TF_CLOUD_ORGANIZATION: "anshuman-test-org"
        TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
        TF_WORKSPACE: "arcade-k8s"
        CONFIG_DIRECTORY: "./"
  
  
      defaults:
        run:
          shell: bash
  
      steps:
      # - name: Set up environment variables
      #   run: |
      #       echo "AWS_ACCESS_KEY_ID=your-access-key-id" >> ${{ secrets.AWS_ACCESS_KEY_ID }}
      #       echo "AWS_SECRET_ACCESS_KEY=your-secret-access-key" >> ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      # Repo checkout
      - name: Checkout
        uses: actions/checkout@v3
  
      # Aws IAM auth
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
  
      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  
      # Terraform init
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.working-directory-k8s }}
  
  
      # Terraform plan
      - name: Terraform Plan
        run: terraform plan -input=false -lock=false
        working-directory: ${{ env.working-directory-k8s }}
  
      # Exit Action on Plan Failure
      - name: 'Terraform Plan Status'
        if: steps.plan.outcome == 'failure'
        run: exit 1
        working-directory: ${{ env.working-directory-k8s }}
      
      # Terraform destroy
      - name: Terraform destroy
        # if: github.ref == 'refs/heads/"pre-master"' && github.event_name == 'push'
        run: terraform destroy -auto-approve -input=false -lock=false
        working-directory: ${{ env.working-directory-k8s }}

  #########################network decommission########################
    terraform-network-decommission:
      name: 'Terraform-network'
      needs: terraform-k8s-decommission
      runs-on: ubuntu-latest
      environment: playground
      
      env:       
        working-directory-network: devsecops_x_arcade_game/Terraform_configuration/env/network
        TF_CLOUD_ORGANIZATION: "anshuman-test-org"
        TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
        TF_WORKSPACE: "arcade-network"
        CONFIG_DIRECTORY: "./"
  
  
      defaults:
        run:
          shell: bash
  
      steps:
      # - name: Set up environment variables
      #   run: |
      #       echo "AWS_ACCESS_KEY_ID=your-access-key-id" >> ${{ secrets.AWS_ACCESS_KEY_ID }}
      #       echo "AWS_SECRET_ACCESS_KEY=your-secret-access-key" >> ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      # Repo checkout
      - name: Checkout
        uses: actions/checkout@v3
   
      # Aws IAM auth
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
  
      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  
      # Terraform init
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.working-directory-network }}
  
  
      # Terraform plan
      - name: Terraform Plan
        run: terraform plan -input=false -lock=false
        working-directory: ${{ env.working-directory-network }}
  
      # Exit Action on Plan Failure
      - name: 'Terraform Plan Status'
        if: steps.plan.outcome == 'failure'
        run: exit 1
        working-directory: ${{ env.working-directory-network }}
  
      # Terraform destroy
      - name: Terraform destroy
        # if: github.ref == 'refs/heads/"pre-master"' && github.event_name == 'push'
        run: terraform destroy -auto-approve -input=false -lock=false
        working-directory: ${{ env.working-directory-network }}
  
  #########################IAM decommission############################
  
    terraform-iam-decommission:
      name: 'Terraform-iam'
      needs: [terraform-k8s-decommission, terraform-network-decommission ]

      runs-on: ubuntu-latest
      environment: playground
      
      env:       
        working-directory-iam: devsecops_x_arcade_game/Terraform_configuration/env/iam
        TF_CLOUD_ORGANIZATION: "anshuman-test-org"
        TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
        TF_WORKSPACE: "arcade-iam"
        CONFIG_DIRECTORY: "./"
  
  
      defaults:
        run:
          shell: bash
  
      steps:
      # - name: Set up environment variables
      #   run: |
      #       echo "AWS_ACCESS_KEY_ID=your-access-key-id" >> ${{ secrets.AWS_ACCESS_KEY_ID }}
      #       echo "AWS_SECRET_ACCESS_KEY=your-secret-access-key" >> ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      # Repo checkout
      - name: Checkout
        uses: actions/checkout@v3
  
      # Aws IAM auth
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
  
      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  
      # Terraform init
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.working-directory-iam }}
  
  
      # Terraform plan
      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: ${{ env.working-directory-iam }}
  
      # Exit Action on Plan Failure
      - name: 'Terraform Plan Status'
        if: steps.plan.outcome == 'failure'
        run: exit 1
        working-directory: ${{ env.working-directory-iam }}
      
      # Terraform destroy
      - name: Terraform destroy
        # if: github.ref == 'refs/heads/"pre-master"' && github.event_name == 'push'
        run: terraform destroy -auto-approve -input=false
        working-directory: ${{ env.working-directory-iam }}